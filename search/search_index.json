{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geohydrodemo","text":"<p>A python package for interactive mapping</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://bojichen.github.io/geohydrodemo</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geohydrodemo.common.ee_initilization","title":"<code>ee_initilization(token_name='EARTHENGINE_TOKEN')</code>","text":"<p>Authentication Earth Engine and initialize an Earth Engine session</p> Source code in <code>geohydrodemo/common.py</code> <pre><code>def ee_initilization(token_name = 'EARTHENGINE_TOKEN'):\n\"\"\"Authentication Earth Engine and initialize an Earth Engine session\"\"\"\n    if ee.data._credentials is None:\n        try:\n            ee_token = os.environ.get(token_name)\n            if ee_token is not None:\n                credential_file_path = os.path.expanduser('~/.config/earthengine/')\n                if not os.path.exists(credential_file_path):\n                    credential = '{\"refresh_token\" : \"%s\"}' % ee_token\n                    os.makedirs(credential_file_path, exist_ok=True)\n                    with open(credential_file_path+\"cerdentials\", 'w') as file:\n                        file.write(credential)\n\n            ee.Initialize()\n        except Exception:\n            ee.Authenticate()\n            ee.Initialize()\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/bojichen/geohydrodemo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geohydrodemo could always use more documentation, whether as part of the official geohydrodemo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/bojichen/geohydrodemo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geohydrodemo for local development.</p> <ol> <li> <p>Fork the geohydrodemo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geohydrodemo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geohydrodemo\n$ cd geohydrodemo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geohydrodemo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/bojichen/geohydrodemo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geohydrodemo/","title":"geohydrodemo module","text":"<p>Main module.</p>"},{"location":"geohydrodemo/#geohydrodemo.geohydrodemo.Map","title":"<code> Map            (Map)         </code>","text":"<p>This Map class inherits thr ipyleaflet Map class</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>ipyleaflet.Map</code> <p>An ipyleaflet map</p> required Source code in <code>geohydrodemo/geohydrodemo.py</code> <pre><code>class Map(ipyleaflet.Map):\n\"\"\"This Map class inherits thr ipyleaflet Map class\n\n    Args:\n        ipyleaflet (ipyleaflet.Map): An ipyleaflet map\n    \"\"\"\n    def __init__(self, **kwargs):\n\n        if \"center\" not in kwargs:\n            kwargs[\"center\"] = [40, -100]\n        if 'zoom' not in kwargs:\n            kwargs['zoom'] = 4\n        if 'scroll_wheel_zoom' not in kwargs:\n            kwargs['scroll_wheel_zoom'] = True\n\n        super().__init__(**kwargs)  #inherit from ipyleaflet\n\n        if 'height' not in kwargs:\n            self.layout.height = \"500px\"\n        else:\n            self.layout.height = kwargs['height']\n\n        self.add_control(FullScreenControl())\n        self.add_control(LayersControl(position=\"topright\"))\n        self.add_control(DrawControl(position='topleft'))\n        self.add_control(MeasureControl())\n        self.add_control(ScaleControl(position='bottomleft'))\n\n        if \"google_map\" not in kwargs:\n            layer = TileLayer(\n                url=\"https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\",\n                attribution=\"Google\",\n                name=\"Google Maps\",\n            )\n            self.add_layer(layer)\n\n\n    def add_geojson(self, in_geojson, style = None, layer_name = 'Untitled'):\n\"\"\"Add a GeoJSON file to the map\n\n        Args:\n            in_geojson (str)): The file path to the input GeoJSON\n            style (dict, optional): The style for the GeoJSON file. Defaults to None.\n            layer_name (str, optional): The layer name for the GeoJSON file. Defaults to 'Untitled'.\n\n        Raises:\n            FileNotFoundError: if the provided file path does not exist.\n            TypeError: If the input geojson is not a str or dict. \n        \"\"\"\n\n        import json\n        if layer_name == \"Untitled\":\n            layer_name = 'Untitled' + ' '+ random_string()\n\n        if isinstance(in_geojson, str): \n            if not os.path.exists(in_geojson):\n                raise FileNotFoundError('The provided GeoJSON file could not be found')\n\n            with open(in_geojson) as f:\n                data = json.load(f)\n\n        elif isinstance(in_geojson, dict):\n            data = in_geojson\n\n        else:\n            raise TypeError('The input geojson must be a type of str or dict')\n\n        if style is None:\n            style = {\n                \"stroke\": True,\n                'color' : '#000000',\n                'weight': 2,\n                'opacity': 1,\n                'fill': True,\n                'fillColor':'#000000',\n                'fillOpacity':0.4,\n            }\n\n        geo_json = ipyleaflet.GeoJSON(data=data, style=style, name = layer_name)\n        self.add_layer(geo_json)\n\n    def add_shapefile(self, in_shp, style = None, layer_name = 'Untitled'):\n\"\"\"Add a shapefile layer to the map\n\n        Args:\n            in_shp (str): The file path to the input shapefile\n            style (dict, optional): The style dictionary. Defaults to None.\n            layer_name (str, optional): The layer name for shapefile layer. Defaults to 'Untitled'.\n        \"\"\"        \n        self.add_geojson(shp_to_geojson(in_shp), style=style, layer_name=layer_name)\n\n    def add_ee_layer(\n            self, ee_object, vis_params={}, name=None, shown=True, opacity=1.0\n        ):\n\"\"\"Adds a given EE object to the map as a layer.\n            Args:\n                ee_object (Collection|Feature|Image|MapId): The object to add to the map.\n                vis_params (dict, optional): The visualization parameters. Defaults to {}.\n                name (str, optional): The name of the layer. Defaults to 'Layer N'.\n                shown (bool, optional): A flag indicating whether the layer should be on by default. Defaults to True.\n                opacity (float, optional): The layer's opacity represented as a number between 0 and 1. Defaults to 1.\n            \"\"\"\n\n            ee_layer = ee_tile_layer(ee_object, vis_params, name, shown, opacity)\n            self.add_layer(ee_layer)\n\n    addLayer = add_ee_layer    \n</code></pre>"},{"location":"geohydrodemo/#geohydrodemo.geohydrodemo.Map.addLayer","title":"<code>addLayer(self, ee_object, vis_params={}, name=None, shown=True, opacity=1.0)</code>","text":"<p>Adds a given EE object to the map as a layer.</p> <p>Parameters:</p> Name Type Description Default <code>ee_object</code> <code>Collection|Feature|Image|MapId</code> <p>The object to add to the map.</p> required <code>vis_params</code> <code>dict</code> <p>The visualization parameters. Defaults to {}.</p> <code>{}</code> <code>name</code> <code>str</code> <p>The name of the layer. Defaults to 'Layer N'.</p> <code>None</code> <code>shown</code> <code>bool</code> <p>A flag indicating whether the layer should be on by default. Defaults to True.</p> <code>True</code> <code>opacity</code> <code>float</code> <p>The layer's opacity represented as a number between 0 and 1. Defaults to 1.</p> <code>1.0</code> Source code in <code>geohydrodemo/geohydrodemo.py</code> <pre><code>def add_ee_layer(\n        self, ee_object, vis_params={}, name=None, shown=True, opacity=1.0\n    ):\n\"\"\"Adds a given EE object to the map as a layer.\n        Args:\n            ee_object (Collection|Feature|Image|MapId): The object to add to the map.\n            vis_params (dict, optional): The visualization parameters. Defaults to {}.\n            name (str, optional): The name of the layer. Defaults to 'Layer N'.\n            shown (bool, optional): A flag indicating whether the layer should be on by default. Defaults to True.\n            opacity (float, optional): The layer's opacity represented as a number between 0 and 1. Defaults to 1.\n        \"\"\"\n\n        ee_layer = ee_tile_layer(ee_object, vis_params, name, shown, opacity)\n        self.add_layer(ee_layer)\n</code></pre>"},{"location":"geohydrodemo/#geohydrodemo.geohydrodemo.Map.add_ee_layer","title":"<code>add_ee_layer(self, ee_object, vis_params={}, name=None, shown=True, opacity=1.0)</code>","text":"<p>Adds a given EE object to the map as a layer.</p> <p>Parameters:</p> Name Type Description Default <code>ee_object</code> <code>Collection|Feature|Image|MapId</code> <p>The object to add to the map.</p> required <code>vis_params</code> <code>dict</code> <p>The visualization parameters. Defaults to {}.</p> <code>{}</code> <code>name</code> <code>str</code> <p>The name of the layer. Defaults to 'Layer N'.</p> <code>None</code> <code>shown</code> <code>bool</code> <p>A flag indicating whether the layer should be on by default. Defaults to True.</p> <code>True</code> <code>opacity</code> <code>float</code> <p>The layer's opacity represented as a number between 0 and 1. Defaults to 1.</p> <code>1.0</code> Source code in <code>geohydrodemo/geohydrodemo.py</code> <pre><code>def add_ee_layer(\n        self, ee_object, vis_params={}, name=None, shown=True, opacity=1.0\n    ):\n\"\"\"Adds a given EE object to the map as a layer.\n        Args:\n            ee_object (Collection|Feature|Image|MapId): The object to add to the map.\n            vis_params (dict, optional): The visualization parameters. Defaults to {}.\n            name (str, optional): The name of the layer. Defaults to 'Layer N'.\n            shown (bool, optional): A flag indicating whether the layer should be on by default. Defaults to True.\n            opacity (float, optional): The layer's opacity represented as a number between 0 and 1. Defaults to 1.\n        \"\"\"\n\n        ee_layer = ee_tile_layer(ee_object, vis_params, name, shown, opacity)\n        self.add_layer(ee_layer)\n</code></pre>"},{"location":"geohydrodemo/#geohydrodemo.geohydrodemo.Map.add_geojson","title":"<code>add_geojson(self, in_geojson, style=None, layer_name='Untitled')</code>","text":"<p>Add a GeoJSON file to the map</p> <p>Parameters:</p> Name Type Description Default <code>in_geojson</code> <code>str</code> <p>The file path to the input GeoJSON</p> required <code>style</code> <code>dict</code> <p>The style for the GeoJSON file. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name for the GeoJSON file. Defaults to 'Untitled'.</p> <code>'Untitled'</code> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>if the provided file path does not exist.</p> <code>TypeError</code> <p>If the input geojson is not a str or dict. </p> Source code in <code>geohydrodemo/geohydrodemo.py</code> <pre><code>def add_geojson(self, in_geojson, style = None, layer_name = 'Untitled'):\n\"\"\"Add a GeoJSON file to the map\n\n    Args:\n        in_geojson (str)): The file path to the input GeoJSON\n        style (dict, optional): The style for the GeoJSON file. Defaults to None.\n        layer_name (str, optional): The layer name for the GeoJSON file. Defaults to 'Untitled'.\n\n    Raises:\n        FileNotFoundError: if the provided file path does not exist.\n        TypeError: If the input geojson is not a str or dict. \n    \"\"\"\n\n    import json\n    if layer_name == \"Untitled\":\n        layer_name = 'Untitled' + ' '+ random_string()\n\n    if isinstance(in_geojson, str): \n        if not os.path.exists(in_geojson):\n            raise FileNotFoundError('The provided GeoJSON file could not be found')\n\n        with open(in_geojson) as f:\n            data = json.load(f)\n\n    elif isinstance(in_geojson, dict):\n        data = in_geojson\n\n    else:\n        raise TypeError('The input geojson must be a type of str or dict')\n\n    if style is None:\n        style = {\n            \"stroke\": True,\n            'color' : '#000000',\n            'weight': 2,\n            'opacity': 1,\n            'fill': True,\n            'fillColor':'#000000',\n            'fillOpacity':0.4,\n        }\n\n    geo_json = ipyleaflet.GeoJSON(data=data, style=style, name = layer_name)\n    self.add_layer(geo_json)\n</code></pre>"},{"location":"geohydrodemo/#geohydrodemo.geohydrodemo.Map.add_shapefile","title":"<code>add_shapefile(self, in_shp, style=None, layer_name='Untitled')</code>","text":"<p>Add a shapefile layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>in_shp</code> <code>str</code> <p>The file path to the input shapefile</p> required <code>style</code> <code>dict</code> <p>The style dictionary. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name for shapefile layer. Defaults to 'Untitled'.</p> <code>'Untitled'</code> Source code in <code>geohydrodemo/geohydrodemo.py</code> <pre><code>def add_shapefile(self, in_shp, style = None, layer_name = 'Untitled'):\n\"\"\"Add a shapefile layer to the map\n\n    Args:\n        in_shp (str): The file path to the input shapefile\n        style (dict, optional): The style dictionary. Defaults to None.\n        layer_name (str, optional): The layer name for shapefile layer. Defaults to 'Untitled'.\n    \"\"\"        \n    self.add_geojson(shp_to_geojson(in_shp), style=style, layer_name=layer_name)\n</code></pre>"},{"location":"geohydrodemo/#geohydrodemo.geohydrodemo.ee_tile_layer","title":"<code>ee_tile_layer(ee_object, vis_params={}, name='Layer untitled', shown=True, opacity=1.0)</code>","text":"<p>Converts and Earth Engine layer to ipyleaflet TileLayer.</p> <p>Parameters:</p> Name Type Description Default <code>ee_object</code> <code>Collection|Feature|Image|MapId</code> <p>The object to add to the map.</p> required <code>vis_params</code> <code>dict</code> <p>The visualization parameters. Defaults to {}.</p> <code>{}</code> <code>name</code> <code>str</code> <p>The name of the layer. Defaults to 'Layer untitled'.</p> <code>'Layer untitled'</code> <code>shown</code> <code>bool</code> <p>A flag indicating whether the layer should be on by default. Defaults to True.</p> <code>True</code> <code>opacity</code> <code>float</code> <p>The layer's opacity represented as a number between 0 and 1. Defaults to 1.</p> <code>1.0</code> Source code in <code>geohydrodemo/geohydrodemo.py</code> <pre><code>def ee_tile_layer(\n    ee_object, vis_params={}, name=\"Layer untitled\", shown=True, opacity=1.0\n):\n\"\"\"Converts and Earth Engine layer to ipyleaflet TileLayer.\n    Args:\n        ee_object (Collection|Feature|Image|MapId): The object to add to the map.\n        vis_params (dict, optional): The visualization parameters. Defaults to {}.\n        name (str, optional): The name of the layer. Defaults to 'Layer untitled'.\n        shown (bool, optional): A flag indicating whether the layer should be on by default. Defaults to True.\n        opacity (float, optional): The layer's opacity represented as a number between 0 and 1. Defaults to 1.\n    \"\"\"\n\n    image = None\n\n    if (\n        not isinstance(ee_object, ee.Image)\n        and not isinstance(ee_object, ee.ImageCollection)\n        and not isinstance(ee_object, ee.FeatureCollection)\n        and not isinstance(ee_object, ee.Feature)\n        and not isinstance(ee_object, ee.Geometry)\n    ):\n        err_str = \"\\n\\nThe image argument in 'addLayer' function must be an instace of one of ee.Image, ee.Geometry, ee.Feature or ee.FeatureCollection.\"\n        raise AttributeError(err_str)\n\n    if (\n        isinstance(ee_object, ee.geometry.Geometry)\n        or isinstance(ee_object, ee.feature.Feature)\n        or isinstance(ee_object, ee.featurecollection.FeatureCollection)\n    ):\n        features = ee.FeatureCollection(ee_object)\n\n        width = 2\n\n        if \"width\" in vis_params:\n            width = vis_params[\"width\"]\n\n        color = \"000000\"\n\n        if \"color\" in vis_params:\n            color = vis_params[\"color\"]\n\n        image_fill = features.style(**{\"fillColor\": color}).updateMask(\n            ee.Image.constant(0.5)\n        )\n        image_outline = features.style(\n            **{\"color\": color, \"fillColor\": \"00000000\", \"width\": width}\n        )\n\n        image = image_fill.blend(image_outline)\n    elif isinstance(ee_object, ee.image.Image):\n        image = ee_object\n    elif isinstance(ee_object, ee.imagecollection.ImageCollection):\n        image = ee_object.mosaic()\n\n    map_id_dict = ee.Image(image).getMapId(vis_params)\n    tile_layer = TileLayer(\n        url=map_id_dict[\"tile_fetcher\"].url_format,\n        attribution=\"Google Earth Engine\",\n        name=name,\n        opacity=opacity,\n        visible=shown,\n    )\n    return tile_layer\n</code></pre>"},{"location":"geohydrodemo/#geohydrodemo.geohydrodemo.shp_to_geojson","title":"<code>shp_to_geojson(in_shp, out_geojson=None)</code>","text":"<p>Covert the shapefile to GeoJSON</p> <p>Parameters:</p> Name Type Description Default <code>in_shp</code> <code>str</code> <p>The file path to the input shapefile.</p> required <code>out_geojson</code> <code>str</code> <p>The file path to the output GeoJSON. Defaults to None.</p> <code>None</code> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>if the input file does not exist.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The dictionary of the GeoJSON.</p> Source code in <code>geohydrodemo/geohydrodemo.py</code> <pre><code>def shp_to_geojson(in_shp, out_geojson = None):\n\"\"\"Covert the shapefile to GeoJSON\n\n    Args:\n        in_shp (str): The file path to the input shapefile.\n        out_geojson (str, optional): The file path to the output GeoJSON. Defaults to None.\n\n    Raises:\n        FileNotFoundError: if the input file does not exist.\n\n    Returns:\n        dict: The dictionary of the GeoJSON.\n    \"\"\"\n    import json\n    import shapefile\n\n    in_shp = os.path.abspath(in_shp)\n\n    if not os.path.exists(in_shp):\n        raise FileNotFoundError('The provided shapfile could not be found')\n\n    sf = shapefile.Reader(in_shp)\n    geojson = sf.__geo_interface__\n\n    if out_geojson is None:\n        return geojson\n    else:\n        out_geojson = os.path.abspath(out_geojson)\n        out_dir = os.path.dirname(out_geojson)\n        if not os.path.exists(out_dir):\n            os.mkdir(out_dir)\n        with open(out_geojson, 'w') as f:\n            f.write(json.dumps(geojson))\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geohydrodemo, run this command in your terminal:</p> <pre><code>pip install geohydrodemo\n</code></pre> <p>This is the preferred method to install geohydrodemo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install geohydrodemo from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/bojichen/geohydrodemo\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geohydrodemo in a project:</p> <pre><code>import geohydrodemo\n</code></pre>"},{"location":"utils/","title":"utils module","text":""},{"location":"utils/#geohydrodemo.utils.random_string","title":"<code>random_string(string_length=3)</code>","text":"<p>Generate a random string of fixed length.</p> <p>Parameters:</p> Name Type Description Default <code>string_length</code> <code>int</code> <p>Fixed length. Defaults to 3.</p> <code>3</code> <p>Returns:</p> Type Description <code>str</code> <p>A random string</p> Source code in <code>geohydrodemo/utils.py</code> <pre><code>def random_string(string_length = 3):\n\"\"\"Generate a random string of fixed length.\n\n    Args:\n        string_length (int, optional): Fixed length. Defaults to 3.\n\n    Returns:\n        str: A random string\n    \"\"\"\n    letters = string.ascii_lowercase\n    return \"\".join(random.choice(letters) for i in range(string_length))\n</code></pre>"},{"location":"examples/add_shapefile/","title":"Add shapefile","text":"In\u00a0[1]: Copied! <pre>import geohydrodemo\n</pre> import geohydrodemo In\u00a0[2]: Copied! <pre>m = geohydrodemo.Map()\n</pre> m = geohydrodemo.Map() In\u00a0[3]: Copied! <pre>m\n</pre> m Out[3]: In\u00a0[4]: Copied! <pre>in_shp = './data/countries.shp'\n</pre> in_shp = './data/countries.shp' In\u00a0[5]: Copied! <pre>style = {\n                \"stroke\": True,\n                'color' : '#ff0000',\n                'weight': 2,\n                'opacity': 1,\n                'fill': True,\n                'fillColor':'#0000ff',\n                'fillOpacity':0.4,\n            }\n</pre> style = {                 \"stroke\": True,                 'color' : '#ff0000',                 'weight': 2,                 'opacity': 1,                 'fill': True,                 'fillColor':'#0000ff',                 'fillOpacity':0.4,             } In\u00a0[6]: Copied! <pre>m.add_shapefile(in_shp,layer_name = 'shapefile', style=style)\n</pre> m.add_shapefile(in_shp,layer_name = 'shapefile', style=style) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/earthengine_intro/","title":"Earthengine intro","text":"In\u00a0[1]: Copied! <pre>import ee\nimport geohydrodemo\n</pre> import ee import geohydrodemo In\u00a0[2]: Copied! <pre>Map = geohydrodemo.Map()\nMap\n</pre> Map = geohydrodemo.Map() Map Out[2]: In\u00a0[3]: Copied! <pre>geohydrodemo.ee_initilization()\n</pre> geohydrodemo.ee_initilization() In\u00a0[4]: Copied! <pre>dem = ee.Image('USGS/SRTMGL1_003')\n\nvis_params = {\n  'min': 0,\n  'max': 4000,\n  'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']}\n</pre> dem = ee.Image('USGS/SRTMGL1_003')  vis_params = {   'min': 0,   'max': 4000,   'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']} In\u00a0[5]: Copied! <pre>ee_layer = geohydrodemo.ee_tile_layer(dem, vis_params, \"DEM\")\n</pre> ee_layer = geohydrodemo.ee_tile_layer(dem, vis_params, \"DEM\") In\u00a0[6]: Copied! <pre>Map.add_layer(ee_layer)\n</pre> Map.add_layer(ee_layer) In\u00a0[7]: Copied! <pre># Map.addLayer(dem, vis_params, \"DEM\")\n</pre> # Map.addLayer(dem, vis_params, \"DEM\") In\u00a0[8]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[9]: Copied! <pre>slider = widgets.FloatSlider(min=0, max=1, step=0.01)\nslider\n</pre> slider = widgets.FloatSlider(min=0, max=1, step=0.01) slider Out[9]: In\u00a0[10]: Copied! <pre>widgets.jslink((ee_layer, \"opacity\"), (slider, \"value\"))\n</pre> widgets.jslink((ee_layer, \"opacity\"), (slider, \"value\")) Out[10]: <pre>Link(source=(TileLayer(attribution='Google Earth Engine', name='DEM', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://earthengine.googleapis.com/v1/projects/earthengine-legacy/maps/82302bf76471cbc4d71eafdc4e3c615a-ff2ab9f705bfbea8781de3f8eadc340a/tiles/{z}/{x}/{y}'), 'opacity'), target=(FloatSlider(value=0.0, max=1.0, step=0.01), 'value'))</pre> In\u00a0[11]: Copied! <pre>from ipyleaflet import WidgetControl\n</pre> from ipyleaflet import WidgetControl In\u00a0[12]: Copied! <pre>control = WidgetControl(widget=slider, position=\"bottomright\")\nMap.add_control(control)\n</pre> control = WidgetControl(widget=slider, position=\"bottomright\") Map.add_control(control) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/folium_intro/","title":"Folium intro","text":"In\u00a0[1]: Copied! <pre>import folium\n</pre> import folium In\u00a0[2]: Copied! <pre>m = folium.Map(location=[45.5236, -122.6750])\nm\n</pre> m = folium.Map(location=[45.5236, -122.6750]) m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>m = folium.Map(location=[45.372, -121.6972], zoom_start=12, tiles=\"Stamen Terrain\")\n\ntooltip = \"Click me!\"\n\nfolium.Marker(\n    [45.3288, -121.6625], popup=\"&lt;i&gt;Mt. Hood Meadows&lt;/i&gt;\", tooltip=tooltip\n).add_to(m)\nfolium.Marker(\n    [45.3311, -121.7113], popup=\"&lt;b&gt;Timberline Lodge&lt;/b&gt;\", tooltip=tooltip\n).add_to(m)\n\nm\n</pre> m = folium.Map(location=[45.372, -121.6972], zoom_start=12, tiles=\"Stamen Terrain\")  tooltip = \"Click me!\"  folium.Marker(     [45.3288, -121.6625], popup=\"Mt. Hood Meadows\", tooltip=tooltip ).add_to(m) folium.Marker(     [45.3311, -121.7113], popup=\"Timberline Lodge\", tooltip=tooltip ).add_to(m)  m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/geohydrodemo/","title":"Geohydrodemo","text":"In\u00a0[1]: Copied! <pre>from geohydrodemo import Map\n</pre> from geohydrodemo import Map In\u00a0[2]: Copied! <pre>m = Map()\n</pre> m = Map() In\u00a0[3]: Copied! <pre>m\n</pre> m Out[3]: In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet_intro/","title":"Ipyleaflet intro","text":"<p>Getting Started with ipyleaflet</p> <p>https://ipyleaflet.readthedocs.io</p> In\u00a0[1]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet In\u00a0[2]: Copied! <pre>m = ipyleaflet.Map()\nm\n</pre> m = ipyleaflet.Map() m Out[2]: In\u00a0[3]: Copied! <pre>from ipyleaflet import Map, FullScreenControl, LayersControl, DrawControl, MeasureControl, ScaleControl\n</pre> from ipyleaflet import Map, FullScreenControl, LayersControl, DrawControl, MeasureControl, ScaleControl In\u00a0[4]: Copied! <pre>m = Map(center=[40, -100], zoom=4, scroll_wheel_zoom=True)\nm.layout.height=\"600px\"\nm\n</pre> m = Map(center=[40, -100], zoom=4, scroll_wheel_zoom=True) m.layout.height=\"600px\" m Out[4]: In\u00a0[5]: Copied! <pre>m.add_control(FullScreenControl())\n</pre> m.add_control(FullScreenControl()) In\u00a0[6]: Copied! <pre>m.add_control(LayersControl(position=\"topright\"))\n</pre> m.add_control(LayersControl(position=\"topright\")) In\u00a0[7]: Copied! <pre>m.add_control(DrawControl(position=\"topleft\"))\n</pre> m.add_control(DrawControl(position=\"topleft\")) In\u00a0[8]: Copied! <pre>m.add_control(MeasureControl())\n</pre> m.add_control(MeasureControl()) In\u00a0[9]: Copied! <pre>m.add_control(ScaleControl(position=\"bottomleft\"))\n</pre> m.add_control(ScaleControl(position=\"bottomleft\")) In\u00a0[10]: Copied! <pre>from ipyleaflet import basemaps, TileLayer\n</pre> from ipyleaflet import basemaps, TileLayer In\u00a0[11]: Copied! <pre>m.add_layer(basemaps.OpenTopoMap)\n</pre> m.add_layer(basemaps.OpenTopoMap) In\u00a0[12]: Copied! <pre>m.add_layer(basemaps.Esri.WorldImagery)\n</pre> m.add_layer(basemaps.Esri.WorldImagery) In\u00a0[13]: Copied! <pre>m\n</pre> m Out[13]: In\u00a0[14]: Copied! <pre>google_map = TileLayer(\n    url=\"https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\",\n    attribution=\"Google\",\n    name=\"Google Maps\",\n)\n</pre> google_map = TileLayer(     url=\"https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\",     attribution=\"Google\",     name=\"Google Maps\", ) In\u00a0[15]: Copied! <pre>m.add_layer(google_map)\n</pre> m.add_layer(google_map) In\u00a0[16]: Copied! <pre>google_satellite = TileLayer(\n    url=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\",\n    attribution=\"Google\",\n    name=\"Google Satellite\"\n)\n</pre> google_satellite = TileLayer(     url=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\",     attribution=\"Google\",     name=\"Google Satellite\" ) In\u00a0[17]: Copied! <pre>m.add_layer(google_satellite)\n</pre> m.add_layer(google_satellite) In\u00a0[18]: Copied! <pre>m\n</pre> m Out[18]: In\u00a0[19]: Copied! <pre>m.attribution_control = False\n</pre> m.attribution_control = False In\u00a0[20]: Copied! <pre>from ipyleaflet import Marker\n</pre> from ipyleaflet import Marker In\u00a0[21]: Copied! <pre>marker1 = Marker(name='marker1', location=(40, -100))\nmarker2 = Marker(name='marker2', location=(30, -90))\nmarker3 = Marker(name='marker3', location=(20, -80))\nm.add_layer(marker1)\nm.add_layer(marker2)\nm.add_layer(marker3)\nm\n</pre> marker1 = Marker(name='marker1', location=(40, -100)) marker2 = Marker(name='marker2', location=(30, -90)) marker3 = Marker(name='marker3', location=(20, -80)) m.add_layer(marker1) m.add_layer(marker2) m.add_layer(marker3) m Out[21]: In\u00a0[22]: Copied! <pre>from ipyleaflet import Map, Marker, MarkerCluster\n</pre> from ipyleaflet import Map, Marker, MarkerCluster In\u00a0[23]: Copied! <pre>marker1 = Marker(name='marker1', location=(50, -100))\nmarker2 = Marker(name='marker2', location=(30, -110))\nmarker3 = Marker(name='marker3', location=(40, -90))\n\nmarker_cluster = MarkerCluster(\n    markers=(marker1, marker2, marker3), name=\"marker cluster\"\n)\n\nm.add_layer(marker_cluster)\nm\n</pre> marker1 = Marker(name='marker1', location=(50, -100)) marker2 = Marker(name='marker2', location=(30, -110)) marker3 = Marker(name='marker3', location=(40, -90))  marker_cluster = MarkerCluster(     markers=(marker1, marker2, marker3), name=\"marker cluster\" )  m.add_layer(marker_cluster) m Out[23]:"},{"location":"examples/ipyleaflet_intro/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/ipyleaflet_intro/#customize-default-map-settings","title":"Customize default map settings\u00b6","text":""},{"location":"examples/ipyleaflet_intro/#add-widget-controls","title":"Add widget controls\u00b6","text":""},{"location":"examples/ipyleaflet_intro/#add-basemaps","title":"Add basemaps\u00b6","text":""},{"location":"examples/ipyleaflet_intro/#add-markers","title":"Add markers\u00b6","text":""},{"location":"examples/ipyleaflet_intro/#add-marker-cluster","title":"Add marker cluster\u00b6","text":""}]}